{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\ISHIKA\\\\Whitehat Jr\\\\Library app\\\\C 69\\\\tabNavigation-master\\\\screens\\\\BookTransactionScreen.js\";\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport * as Permissions from 'expo-permissions';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n\nvar TransactionScreen = function (_React$Component) {\n  _inherits(TransactionScreen, _React$Component);\n\n  function TransactionScreen() {\n    var _this;\n\n    _classCallCheck(this, TransactionScreen);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TransactionScreen).call(this));\n\n    _this.getCameraPermissions = function _callee() {\n      var _await$Permissions$as, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.CAMERA));\n\n            case 2:\n              _await$Permissions$as = _context.sent;\n              status = _await$Permissions$as.status;\n\n              _this.setState({\n                hasCameraPermissions: status === 'granted',\n                buttonState: 'clicked',\n                scanned: false\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    _this.handleBarCodeScanned = function (_ref) {\n      var type = _ref.type,\n          data = _ref.data;\n\n      _this.setState({\n        scanned: true,\n        scannedData: data,\n        buttonState: 'normal'\n      });\n    };\n\n    _this.state = {\n      hasCameraPermissions: null,\n      scanned: false,\n      scannedData: '',\n      buttonState: 'normal'\n    };\n    return _this;\n  }\n\n  _createClass(TransactionScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var hasCameraPermissions = this.state.hasCameraPermissions;\n      var scanned = this.state.scanned;\n      var buttonState = this.state.buttonState;\n\n      if (buttonState !== \"normal\" && hasCameraPermissions) {\n        return React.createElement(BarCodeScanner, {\n          onBarCodeScanned: scanned ? undefined : this.handleBarCodeScanned,\n          style: StyleSheet.absoluteFillObject,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          }\n        });\n      } else if (buttonState === \"normal\") {\n        return React.createElement(View, {\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          }\n        }, React.createElement(Text, {\n          style: styles.displayText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          }\n        }, hasCameraPermissions === true ? this.state.scannedData : \"Request for Camera Permissions\"), React.createElement(TouchableOpacity, {\n          style: styles.scanButton,\n          onPress: function onPress() {\n            _this2.getCameraPermissions;\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          }\n        }, React.createElement(Text, {\n          style: styles.buttonText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          }\n        }, \"Scan QR code\")));\n      }\n    }\n  }]);\n\n  return TransactionScreen;\n}(React.Component);\n\nexport { TransactionScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  displayText: {\n    fontSize: 15,\n    textDecorationLine: 'underline'\n  },\n  scanButton: {\n    backgroundColor: '#2196F3',\n    padding: 10,\n    margin: 10\n  },\n  buttonText: {\n    fontSize: 20\n  }\n});","map":{"version":3,"sources":["C:/Users/User/Desktop/ISHIKA/Whitehat Jr/Library app/C 69/tabNavigation-master/screens/BookTransactionScreen.js"],"names":["React","Permissions","BarCodeScanner","TransactionScreen","getCameraPermissions","askAsync","CAMERA","status","setState","hasCameraPermissions","buttonState","scanned","handleBarCodeScanned","type","data","scannedData","state","undefined","StyleSheet","absoluteFillObject","styles","container","displayText","scanButton","buttonText","Component","create","flex","justifyContent","alignItems","fontSize","textDecorationLine","backgroundColor","padding","margin"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Text, View,TouchableOpacity,StyleSheet } from 'react-native';\nimport * as Permissions from 'expo-permissions';\nimport {BarCodeScanner} from 'expo-barcode-scanner';\n\n\nexport default class TransactionScreen extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      hasCameraPermissions: null,\n      scanned: false,\n      scannedData: '',\n      buttonState:'normal'\n    }\n  }\n  getCameraPermissions=async()=>{\n    const {status} = await Permissions.askAsync(Permissions.CAMERA);\n    this.setState({\n      hasCameraPermissions:status==='granted',\n      buttonState: 'clicked',\n      scanned: false\n    })\n  }\n  handleBarCodeScanned=({type, data})=>{\n    \n    this.setState({\n      scanned:true,\n      scannedData: data,\n      buttonState:'normal'\n    })\n  }\n    render() {\n      const hasCameraPermissions = this.state.hasCameraPermissions\n      const scanned = this.state.scanned;\n      const buttonState = this.state.buttonState;\n\n      if (buttonState !== \"normal\" && hasCameraPermissions){\n        return(\n          <BarCodeScanner\n            onBarCodeScanned={scanned ? undefined : this.handleBarCodeScanned}\n            style={StyleSheet.absoluteFillObject}\n          />\n        );\n      }\n      else if (buttonState === \"normal\"){\n\n      return (\n        <View style={styles.container}>\n          <Text style={styles.displayText}>\n            {hasCameraPermissions === true ? this.state.scannedData: \"Request for Camera Permissions\"}\n          </Text>\n          <TouchableOpacity style={styles.scanButton}\n          onPress={()=>{\n              this.getCameraPermissions\n          }} >  \n            <Text style ={styles.buttonText}>Scan QR code</Text>\n            </TouchableOpacity>\n        </View>\n      );\n    }\n  }\n  }\n  \n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    displayText:{\n      fontSize: 15,\n      textDecorationLine: 'underline'\n    },\n    scanButton:{\n      backgroundColor: '#2196F3',\n      padding: 10,\n      margin: 10\n    },\n    buttonText:{\n      fontSize: 20,\n    }\n  });"]},"metadata":{},"sourceType":"module"}